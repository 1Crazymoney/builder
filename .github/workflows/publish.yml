name: Build & Publish Docker Image

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    # TODO: version in and env var
    steps:
      - uses: actions/checkout@v2-beta
      - name: Build and publish to Docker Hub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: smartcontract/builder:1.0.35
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Push to ECR
      - name: install aws cli
        run: |
          curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          rm awscliv2.zip
      - name: configure aws cli
        env:
          AWS_ROLE_TO_ASSUME: '${{ secrets.AWS_ROLE_TO_ASSUME }}'
          AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'
          AWS_ECR_ACCOUNT_URL: '${{ secrets.AWS_ECR_ACCOUNT_URL }}'
        run: |
          # Get temporary credentials to access resoures available to specific role
          temporaryCredentials=$(
            aws sts assume-role \
              --role-arn "${AWS_ROLE_TO_ASSUME}" \
              --role-session-name "gha-builder-image"
          )
          # Deconstruct json response, extracting aws credentials
          accessKeyID=$(echo $temporaryCredentials | jq .Credentials.AccessKeyId | xargs)
          secretAccessKey=$(echo $temporaryCredentials | jq .Credentials.SecretAccessKey | xargs)
          sessionToken=$(echo $temporaryCredentials | jq .Credentials.SessionToken | xargs)
          # Store aws creds in .aws folder
          aws configure set aws_access_key_id ${accessKeyID}
          aws configure set aws_secret_access_key ${secretAccessKey}
          aws configure set aws_session_token ${sessionToken}
          # Use temporary keys to get account ID
          accountID=$(aws sts get-caller-identity --output text --query 'Account')
          # Store credentials in env vars, allowing subsequent steps to use correct credentials
          echo "::set-env name=AWS_ACCESS_KEY_ID::${accessKeyID}";
          echo "::set-env name=AWS_SECRET_ACCESS_KEY::${secretAccessKey}";
          echo "::set-env name=AWS_SESSION_TOKEN::${sessionToken}";
          echo "::set-env name=AWS_ACCOUNT_ID::${accountID}";
          echo "::set-env name=AWS_ECR_ACCOUNT_URL::${accountID}.dkr.ecr.us-west-2.amazonaws.com/builder"
      - name: docker login to ECR
        env:
          AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'
        run: |
          aws ecr get-login-password --region "${AWS_DEFAULT_REGION}" --profile "default" | docker login --username AWS --password-stdin "${AWS_ECR_ACCOUNT_URL}"
      - name: Retag and push docker image
        run: |
          docker tag "smartcontract/builder:1.0.35" "${AWS_ECR_ACCOUNT_URL}:1.0.35"
          docker push "${AWS_ECR_ACCOUNT_URL}:1.0.35"
